//file:noinspection GroovyAssignabilityCheck
//file:noinspection GrDeprecatedAPIUsage
plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "com.matthewprenger.cursegradle" version "1.4.0"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"

    modApi "dev.architectury:architectury-fabric:${rootProject.architectury_version}"
    modApi("com.terraformersmc:modmenu:${rootProject.modmenu_version}")
    modApi("com.github.Virtuoel:Pehkui:${rootProject.pehkui_fabric}", {
        exclude group: "net.fabricmc.fabric-api"
    })

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
    common(project(path: ":fabric-like", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":fabric-like", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    inputs.property "id", rootProject.property("id")
    inputs.property "version", project.version
    inputs.property "name", rootProject.property("name")
    inputs.property "description", rootProject.property("description")
    inputs.property "author", rootProject.property("author")
    inputs.property "github_url", rootProject.property("github_url")
    inputs.property "license", rootProject.property("license")

    filesMatching("fabric.mod.json") {
        expand "id": rootProject.property("id"),
                "version": project.version,
                "name": rootProject.property("name"),
                "description": rootProject.property("description"),
                "author": rootProject.property("author"),
                "github_url": rootProject.property("github_url"),
                "license": rootProject.property("license")
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}


curseforge {
    if (System.getenv("CURSEFORGE_API_KEY") != null) {
        println("Enabling Curseforge publishing for Fabric")
        apiKey = System.getenv("CURSEFORGE_API_KEY")

        project {
            id = "485532"
            changelogType = "markdown"
            releaseType = "release"
            changelog = rootProject.file("CHANGELOG.md")

            mainArtifact(remapJar.archiveFile) {
                displayName = rootProject.property("release_name").replace("\$LOADER", "Fabric")
            }

            afterEvaluate {
                uploadTask.dependsOn("build")
            }

            addGameVersion "Fabric"
            addGameVersion "1.18.2"

            relations {
                requiredDependency "fabric-api"
                requiredDependency "architectury-api"
                requiredDependency "cloth-config"
            }
        }

        options {
            forgeGradleIntegration = false
        }
    }
}
